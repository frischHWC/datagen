# WARNING: required property to start the server
server.tomcat.additional-tld-skip-patterns=*.jar

# Vaadin
logging.level.org.atmosphere=warn
spring.mustache.check-template-location=false
vaadin.allowed-packages=com.vaadin,org.vaadin,dev.hilla,com.datagen
vaadin.exclude-urls=/swagger-ui/**,/api/v1/**
spring.jpa.defer-datasource-initialization=true
vaadin.productionMode=true

# When deployed to CDP, should be set to 'cdp'
spring.profiles.active=cdp

# General conf 
app.name=Data Generator
server.port={{ globals['app_port'] }}
hadoop.user=${USER}
hadoop.home=/user/${USER}

# General default Conf
generation.threads.default={{ globals['threads'] }}
generation.batches.default={{ globals['number_of_batches'] }}
generation.rows.default={{ globals['number_of_rows'] }}
datagen.home.directory={{ globals['datagen_home_dir'] }}
datagen.model.path=${DATAGEN_MODELS_DIR}
datagen.model.received.path={{ globals['data_model_received'] }}
datagen.model.generated.path={{ globals['data_model_generated'] }}
datagen.model.store.path={{ globals['data_model_store'] }}
datagen.commands.path={{ globals['commands_file_path'] }}
datagen.credentials.path={{ globals['credentials_file_path'] }}
datagen.analysis.path={{ globals['analysis_file_path'] }}
datagen.scheduler.file.path={{ globals['scheduler_file_path'] }}
datagen.users.file.path={{ globals['users_file_path'] }}
datagen.load.default.models={{ globals['load_default_models'] }}

{% if globals['tls_enabled'] == 'true' %}
# Spring internal TLS settings
server.ssl.key-store={{ globals['keystore_file'] }}
server.ssl.key-store-password=${KEYSTORE_PASSWORD}
server.ssl.key-store-type=JKS
server.ssl.key-alias=${HOST}
server.ssl.key-password=${KEYSTORE_KEYPASSWORD}
server.ssl.trust-store={{ globals['truststore_location'] }}
server.ssl.trust-store-password=${TRUSTSTORE_PASSWORD}
{% endif %}

# Auth config
security.basic.enabled=false
# Auth config
security.basic.enabled=false
# Can be ldap, ldap-embedded, internal
datagen.auth.type={{ globals['auth_type'] }}
# Internal Settings
datagen.admin.user={{ globals['admin_user'] }}
datagen.admin.password=${ADMIN_PASSWORD}
{% if globals['auth_type'] == 'internal' %}
# List of groups/users that will be admin
datagen.auth.internal.group.admins={{ globals['admin_users'] }}
datagen.auth.internal.user.admins={{ globals['admin_groups'] }}
{% endif %}

{% if globals['auth_type'] == 'ldap' %}
# LDAP Settings
datagen.auth.ldap.url={{ globals['ldap_url'] }}
datagen.auth.ldap.basedn={{ globals['ldap_basedn'] }}
datagen.auth.ldap.bind.user={{ globals['ldap_bind_user'] }}
datagen.auth.ldap.bind.password={{ globals['ldap_bind_password'] }}
datagen.auth.ldap.group.base={{ globals['ldap_group_base'] }}
datagen.auth.ldap.group.filter={{ globals['ldap_group_filter'] }}
datagen.auth.ldap.group.search.subtree={{ globals['ldap_group_search_subtree'] }}
datagen.auth.ldap.group.search.maxdepth={{ globals['ldap_group_search_maxdepth'] }}
datagen.auth.ldap.group.role.attribute={{ globals['ldap_group_role_attribute'] }}
datagen.auth.ldap.group.convert.uppercase={{ globals['ldap_group_convert_uppercase'] }}
datagen.auth.ldap.group.attribute={{ globals['ldap_group_attribute'] }}
datagen.auth.ldap.group.user.attribute={{ globals['ldap_group_user_attribute'] }}
datagen.auth.ldap.group.reverse.search={{ globals['ldap_reverse_search'] }}
datagen.auth.ldap.group.reverse.search.timeout={{ globals['ldap_reverse_search_timeout'] }}
datagen.auth.ldap.user.base={{ globals['ldap_user_base'] }}
datagen.auth.ldap.user.filter={{ globals['ldap_user_filter'] }}
datagen.auth.ldap.user.attribute={{ globals['ldap_user_attribute'] }}
# List of groups/users that will be admin
datagen.auth.ldap.group.admins={{ globals['admin_groups'] }}
datagen.auth.ldap.user.admins={{ globals['admin_users'] }}
# List of group/users that can access datagen (if empty, all can access)
datagen.auth.ldap.group.users={{ globals['ldap_allowed_groups'] }}
datagen.auth.ldap.user.users={{ globals['ldap_allowed_users'] }}
{% endif %}

{% if globals['auth_type'] == 'ldap-embedded' %}
spring.ldap.embedded.ldif=classpath:users.ldif
spring.ldap.embedded.base-dn=dc=springframework,dc=org
spring.ldap.embedded.port=8389
{% endif %}

# Kerberos Config
kerberos.enabled={{ globals['kerberos_enabled'] }}
kerberos.user=${PRINCIPAL}
kerberos.keytab=${KEYTAB_PATH}

# TLS Config
tls.enabled={{ globals['tls_enabled'] }}
truststore.location={{ globals['truststore_location'] }}
truststore.password=${TRUSTSTORE_PASSWORD}
keystore.location={{ globals['keystore_file'] }}
keystore.password=${KEYSTORE_PASSWORD}
keystore.keypassword=${KEYSTORE_KEYPASSWORD}

# These are default config file's path in a CDP cluster
# In case below settings are not set, these files are used to extrapolate them
hadoop.core.site.path={{ globals['core_site_path'] }}
hadoop.hdfs.site.path={{ globals['hdfs_site_path'] }}
hadoop.ozone.site.path={{ globals['ozone_site_path'] }}
hadoop.hbase.site.path={{ globals['hbase_site_path'] }}
hadoop.hive.site.path={{ globals['hive_site_path'] }}
solr.env.path={{ globals['solr_env_path'] }}
kafka.conf.client.path={{ globals['kafka_client_conf_path'] }}
schema.registry.conf.path={{ globals['schema_registry_conf_path'] }}
kudu.conf.path={{ globals['kudu_conf_path'] }}

# Auto-discovery Using CM - This replaces config files if it is set
cm.autodiscovery={{ globals['cm_auto_discovery'] }}
cm.url=${CM_URL}
cm.user=${CM_USER}
cm.password=${CM_PASSWORD}
cm.cluster.name=${CLUSTER_NAME}

# NB: A value #{VALUE} is a placeholder to another defined value in this file

# Other configurations that are either derived from previous files if empty or must be set using APIs when loading data
# HDFS
hdfs.uri={{ globals['hdfs_uri'] }}
hdfs.auth.kerberos=#{kerberos.enabled}
# It is not needed to fill below configuration if KERBEROS is not activated
hdfs.auth.kerberos.user=#{kerberos.user}
hdfs.auth.kerberos.keytab=#{kerberos.keytab}


# HBASE
hbase.zookeeper.quorum={{ globals['hbase_zk_quorum'] }}
hbase.zookeeper.port={{ globals['hbase_zk_quorum_port'] }}
hbase.zookeeper.znode={{ globals['hbase_znode_parent'] }}
hbase.auth.kerberos=#{kerberos.enabled}
# It is not needed to fill below configuration if KERBEROS is not activated
hbase.auth.kerberos.user=#{kerberos.user}
hbase.auth.kerberos.keytab=#{kerberos.keytab}


# OZONE
ozone.service.id={{ globals['ozone_service_id'] }}
ozone.auth.kerberos=#{kerberos.enabled}
# It is not needed to fill below configuration if KERBEROS is not activated
ozone.auth.kerberos.user=#{kerberos.user}
ozone.auth.kerberos.keytab=#{kerberos.keytab}


# HIVE
hive.zookeeper.quorum={{ globals['hive_zk_quorum'] }}
hive.zookeeper.znode={{ globals['hive_znode'] }}
hive.auth.kerberos=#{kerberos.enabled}
# It is not needed to fill below configuration if KERBEROS is not activated
hive.security.user=#{kerberos.user}
hive.security.keytab=#{kerberos.keytab}
hive.truststore.location=#{truststore.location}
hive.truststore.password=#{truststore.password}


# SOLR
solr.zookeeper.quorum={{ globals['solr_zk_quorum'] }}
solr.zookeeper.znode={{ globals['solr_znode'] }}
solr.tls.enabled={{ globals['solr_tls_enabled'] }}
solr.auth.kerberos=#{kerberos.enabled}
# It is not needed to fill below configuration if KERBEROS is not activated
solr.auth.kerberos.keytab=#{kerberos.keytab}
solr.auth.kerberos.user=#{kerberos.user}
solr.truststore.location=#{truststore.location}
solr.truststore.password=#{truststore.password}
solr.keystore.location=#{keystore.location}
solr.keystore.password=#{keystore.password}


# KAFKA
kafka.brokers={{ globals['kafka_url'] }}
kafka.security.protocol={{ globals['kafka_protocol'] }}
schema.registry.url={{ globals['schema_registry_url'] }}
schema.registry.tls.enabled={{ globals['schema_registry_tls_enabled'] }}
# It is not needed to fill below configuration if KERBEROS is not activated (i.e. protocol is PLAINTEXT)
kafka.keystore.location=#{keystore.location}
kafka.truststore.location=#{truststore.location}
kafka.keystore.password=#{keystore.password}
kafka.keystore.key.password=#{keystore.keypassword}
kafka.truststore.password=#{truststore.password}
kafka.sasl.mechanism={{ globals['kafka_sasl_mechanism'] }}
kafka.sasl.kerberos.service.name={{ globals['kafka_sasl_service_name'] }}
kafka.auth.kerberos.keytab=#{kerberos.keytab}
kafka.auth.kerberos.user=#{kerberos.user}


# KUDU
kudu.url={{ globals['kudu_url'] }}
kudu.auth.kerberos=#{kerberos.enabled}
# It is not needed to fill below configuration if KERBEROS is not activated
kudu.security.user=#{kerberos.user}
kudu.security.keytab=#{kerberos.keytab}
kudu.truststore.location=#{truststore.location}
kudu.truststore.password=#{truststore.password}

# S3
s3.access_key.id={{ globals['s3_access_key_id'] }}
s3.access_key.secret={{ globals['s3_access_key_secret'] }}
s3.region={{ globals['s3_region'] }}

# Azure
adls.account.name={{ globals['adls_account_name'] }}
# Type can be either dfs or blob
adls.account.type={{ globals['adls_account_type'] }}
adls.sas.token={{ globals['adls_sas_token'] }}

# GCS
gcs.project.id={{ globals['gcs_project_id'] }}
# Only if using a service account key, otherwise use any other ADC login
gcs.account.key.path={{ globals['gcs_account_key'] }}
gcs.region={{ globals['gcs_region'] }}

# OLLAMA
spring.ai.ollama.base-url={{ globals['ollama_base_url'] }}
spring.ai.ollama.chat.enabled=true
spring.ai.ollama.chat.options.format=json
ollama.model.default={{ globals['ollama_model'] }}
ollama.temperature.default={{ globals['ollama_temperature'] }}
ollama.frequency_penalty.default={{ globals['ollama_frequency_penalty'] }}
ollama.presence_penalty.default={{ globals['ollama_presence_penalty'] }}
ollama.top_p.default={{ globals['ollama_top_p'] }}

# BEDROCK
bedrock.region={{ globals['bedrock_region'] }}
bedrock.model.default={{ globals['bedrock_model'] }}
bedrock.temperature.default={{ globals['bedrock_temperature'] }}
bedrock.max_tokens.default={{ globals['bedrock_max_tokens'] }}
bedrock.access_key.id={{ globals['bedrock_access_key_id'] }}
bedrock.access_key.secret={{ globals['bedrock_access_key_secret'] }}

# OPEN AI
# Let the api key here to 'test' (avoid auto-configuration of client not working)
spring.ai.openai.api-key={{ globals['openai_key_name'] }}
openai.api.key={{ globals['openai_key'] }}
openai.model.default={{ globals['openai_model'] }}
openai.temperature.default={{ globals['openai_temperature'] }}
openai.frequency_penalty.default={{ globals['openai_frequency_penalty'] }}
openai.presence_penalty.default={{ globals['openai_presence_penalty'] }}
openai.max_tokens.default={{ globals['openai_max_tokens'] }}
openai.top_p.default={{ globals['openai_top_p'] }}

#Local LLM
local.llm.temperature.default={{ globals['local_llm_temperature'] }}
local.llm.frequency_penalty.default={{ globals['local_llm_frequence_penalty'] }}
local.llm.presence_penalty.default={{ globals['local_llm_presence_penalty'] }}
local.llm.max_tokens.default={{ globals['local_llm_max_tokens'] }}
local.llm.top_p.default={{ globals['local_llm_top_p'] }}