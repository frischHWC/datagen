{
  "name": "DATAGEN",
  "label": "Datagen",
  "description": "The service to generate Data into various services of CDP platform",
  "version": "0.8.1",
  "parcel": {
    "requiredTags": [
      "datagen"
    ],
    "optionalTags": [

    ]
  },
  "runAs": {
    "user": "datagen",
    "group": "datagen",
    "principal": "datagen"
  },
  "maxInstances": 1,
  "compatibility": {
    "generation": 2,
    "cdhVersion": {
      "min": "7.1.9",
      "max": "8.0.0"
    }
  },
  "rolesWithExternalLinks": [
    "DATAGEN_SERVER"
  ],
  "hdfsDirs": [
    {
      "name": "CreateUserHdfsHomeDirCommand",
      "label": "Create Datagen User Home Dir",
      "description": "Creates the Datagen user directory in HDFS",
      "directoryDescription": "Datagen HDFS user directory",
      "path": "/user/${user}",
      "permissions": "0755"
    }
  ],
  "serviceInit": {
    "preStartSteps": [
      {
        "commandName": "CreateUserHdfsHomeDirCommand"
      },
      {
        "commandName": "InitServiceCommand"
      }
    ]
  },
  "commands": [
    {
      "name": "InitServiceCommand",
      "label": "Initialize the service directories and policies",
      "description": "Initialize Service by creating local directories and ranger required policies",
      "roleCommand": "init_service",
      "roleName": "DATAGEN_SERVER",
      "runMode": "single"
    },
    {
      "name": "gen_customer",
      "label": "Generate 1 Million Customers to HDFS, Ozone and Hive",
      "description": "Generate 1 Million Customers to HDFS and Hive",
      "roleCommand": "gen_customer_hdfs_ozone_hive",
      "roleName": "DATAGEN_SERVER",
      "runMode": "single"
    },
    {
      "name": "gen_customer_hdfs",
      "label": "Generate 1 Million Customers to HDFS",
      "description": "Generate 1 Million Customers to HDFS",
      "roleCommand": "gen_customer_hdfs",
      "roleName": "DATAGEN_SERVER",
      "runMode": "single"
    },
    {
      "name": "gen_customer_ozone",
      "label": "Generate 1 Million Customers to Ozone",
      "description": "Generate 1 Million Customers to Ozone",
      "roleCommand": "gen_customer_ozone",
      "roleName": "DATAGEN_SERVER",
      "runMode": "single"
    },
    {
      "name": "gen_transaction",
      "label": "Generate 1 Million Transactions to HBase",
      "description": "Generate 1 Million Transactions to HBase",
      "roleCommand": "gen_transaction_hbase",
      "roleName": "DATAGEN_SERVER",
      "runMode": "single"
    },
    {
      "name": "gen_sensor",
      "label": "Generate 1 Million Sensors Data to Hive",
      "description": "Generate 1 Million Sensors Data to Hive",
      "roleCommand": "gen_sensor_hive",
      "roleName": "DATAGEN_SERVER",
      "runMode": "single"
    },
    {
      "name": "gen_public_service_kudu",
      "label": "Generate 1 Million Public Service Data to Kudu",
      "description": "Generate 1 Million Public Service Data to Kudu",
      "roleCommand": "gen_public_service_kudu",
      "roleName": "DATAGEN_SERVER",
      "runMode": "single"
    },
    {
      "name": "gen_public_service_kafka",
      "label": "Generate 1 Million Public Service Data to Kafka in Avro",
      "description": "Generate 1 Million Public Service Data to Kafka in Avro",
      "roleCommand": "gen_public_service_kafka",
      "roleName": "DATAGEN_SERVER",
      "runMode": "single"
    },
    {
      "name": "gen_weather_solr",
      "label": "Generate 1 Million Weather Data to SolR ",
      "description": "Generate 1 Million Weather Data to SolR",
      "roleCommand": "gen_weather_solr",
      "roleName": "DATAGEN_SERVER",
      "runMode": "single"
    },
    {
      "name": "gen_weather_kafka",
      "label": "Generate 1 Million Weather Data to Kafka in JSON",
      "description": "Generate 1 Million Weather Data to Kafka in JSON",
      "roleCommand": "gen_weather_kafka",
      "roleName": "DATAGEN_SERVER",
      "runMode": "single"
    },
    {
      "name": "gen_local",
      "label": "Generate Local Data as CSV, JSON, AVRO, ORC, PARQUET",
      "description": "Generate Local Data as CSV, JSON, AVRO, ORC, PARQUET",
      "roleCommand": "gen_local_data",
      "roleName": "DATAGEN_SERVER",
      "runMode": "single"
    }
  ],
  "kerberos": "${kerberos_enabled}",
  "parameters": [
    {
      "name": "kerberos_enabled",
      "label": "Kerberos Enabled",
      "description": "Set to true if Kerberos is enabled for services where data will be generated. Principal used is 'datagen' and keytab is generated by CM",
      "required": true,
      "configurableInWizard": true,
      "default": true,
      "type": "boolean"
    }
  ],
  "serviceDependencies": [
    {
      "name": "RANGER"
    }
  ],
  "dependencyExtensions": [
      {
        "type": "clusterInfo",
        "extensionId": "cluster_info"
      }
    ],
  "roles": [
    {
      "name": "DATAGEN_SERVER",
      "label": "Datagen Web Server",
      "pluralLabel": "Web Servers",
      "jvmBased": "true",
      "internalCmUser": {
          "userRole": "readOnly"
      },
      "startRunner": {
        "program": "scripts/control.sh",
        "args": [
          "start"
        ],
        "environmentVariables": {
          "MAX_HEAP_SIZE": "${max_heap_size}",
          "SERVER_PORT": "${app_port}",
          "PRINCIPAL": "${principal}/${host}",
          "USER": "${user}",
          "HOST": "${host}",
          "CM_URL": "${cm_internal_url}",
          "CLUSTER_NAME": "${cluster_name}",
          "TRUSTSTORE_LOCATION": "${ssl_client_truststore_location}",
          "TRUSTSTORE_PASSWORD": "${ssl_client_truststore_password}",
          "KEYSTORE_PASSWORD": "${ssl_server_keystore_password}",
          "KEYSTORE_KEYPASSWORD": "${ssl_server_keystore_keypassword}",
          "ADMIN_PASSWORD": "${admin_password}",
          "JAVA_HOME_CUSTOM": "${java_home_custom}"
        }
      },
      "configWriter": {
        "generators": [
          {
            "filename": "service.properties",
            "configFormat": "jinja",
            "template": "aux/templates/properties.j2"
          }
        ]
      },
      "kerberosPrincipals": [
        {
          "name": "datagen_principal",
          "primary": "${principal}",
          "instance": "${host}"
        }
      ],
      "metricsSource": {
        "metricsFormat": "SIMPLE",
        "httpSource": {
          "httpUrl": "http://${host}:${app_port}/api/v1/metrics/all",
          "httpsUrl": "https://${host}:${app_port}/api/v1/metrics/all",
          "sslEnabled": "${ssl_enabled}",
          "mtlsEnabled": "false",
          "kerberosEnabled": "false",
          "kerberosPrincipal": "${principal}"
        }
      },
      "sslServer": {
        "keystoreFormat": "jks",
        "keyIdentifier": "clientkey",
        "enabledConfigName": "tls_enabled",
        "keystoreLocationConfigName": "keystore_file",
        "keystorePasswordConfigName": "keystore_password",
        "keyPasswordOptionality": "optional",
        "keystoreKeyPasswordConfigName": "keystore_key_password",
        "keystorePasswordCredentialProviderCompatible": true,
        "keystoreKeyPasswordCredentialProviderCompatible": true,
        "autoTlsMode": "auto"
      },
      "sslClient": {
        "truststoreLocationConfigName": "truststore_location",
        "truststorePasswordConfigName": "truststore_password",
        "truststorePasswordCredentialProviderCompatible": true,
        "autoTlsMode": "auto"
      },
      "logging": {
        "dir": "/var/log/datagen",
        "filename": "datagen.log",
        "modifiable": true,
        "configName": "log.dir",
        "loggingType": "logback"
      },
      "externalLink": {
        "name": "datagen_ui",
        "label": "Datagen Web UI",
        "url": "http://${host}:${app_port}/",
        "secureUrl": "https://${host}:${app_port}/"
      },
      "additionalExternalLinks" : [
        {
        "name" : "datagen_swagger",
        "label" : "Datagen Swagger",
        "url" : "http://${host}:${app_port}/swagger-ui/index.html#/"
        }
       ],
      "topology": {
        "minInstances": "1"
      },
      "healthAggregation": {
        "type": "nonSingleton",
        "percentGreenForGreen": 90,
        "percentYellowGreenForYellow": 49
      },
      "healthTests" : [
       {
        "type" : "metric",
        "name" : "ANSWER_TIME",
        "label" : "Time to Answer requests",
        "description" : "Time taken to answer metrics",
        "metric" : "datagen_answer_time",
        "timeWindowSec" : 120,
        "comparisonOperator" : "gt",
        "aggregationFunction" : "avg",
        "greenMessage" : "Time to get metrics is relatively low : ${metric.value} ms",
        "yellowThreshold" : 1000,
        "yellowMessage" : "Time to get metrics is high on average, consider check Datagen's health : ${metric.value} ms",
        "redThreshold" : 30000,
        "redMessage" : "Time to get metrics is way too high on average, consider check Datagen's health : ${metric.value} ms",
        "missingDataColor" : "yellow"
       }
      ],
      "commands": [
        {
          "name": "init_service",
          "label": "Init service",
          "description": "Initializes the service by creating required dirs and Ranger policies",
          "expectedExitCodes": [
            0
          ],
          "requiredRoleState": "stopped",
          "commandRunner": {
            "program": "scripts/init.sh",
            "args": [
              "init"
            ],
            "environmentVariables": {
              "DATAGEN_USER": "${user}",
              "DATA_MODEL_RECEIVED": "${data_model_received}",
              "DATA_MODEL_GENERATED": "${data_model_generated}",
              "SCHEDULER_FILE_PATH": "${scheduler_file_path}",
              "RANGER_SERVICE_NAME": "${dependency:RANGER}",
              "RANGER_URL": "${ranger_url}",
              "RANGER_ADMIN_USER": "${ranger_user}",
              "RANGER_ADMIN_PASSWORD": "${ranger_password}",
              "ADMIN_PASSWORD": "${admin_password}",
              "HBASE_SERVICE": "${dependency:HBASE}",
              "HDFS_SERVICE": "${dependency:HDFS}",
              "HIVE_SERVICE": "${dependency:HIVE}",
              "KAFKA_SERVICE": "${dependency:KAFKA}",
              "KUDU_SERVICE": "${dependency:KUDU}",
              "OZONE_SERVICE": "${dependency:OZONE}",
              "SCHEMAREGISTRY_SERVICE": "${dependency:SCHEMAREGISTRY}",
              "SOLR_SERVICE": "${dependency:SOLR}"
            }
          }
        },
        {
          "name": "gen_customer_hdfs_ozone_hive",
          "label": "Generate 1 Million Customers to HDFS and Hive and Ozone",
          "description": "Generate 1 Million Customers to HDFS and Hive and Ozone",
          "expectedExitCodes": [
            0
          ],
          "requiredRoleState": "running",
          "commandRunner": {
            "program": "scripts/generate_data.sh",
            "args": [
              "gen_customer_hdfs_ozone_hive",
              "${app_port}",
              "${ssl_enabled}",
              "${admin_user}",
              "${admin_password}",
              "${use_extra_header}"
            ]
          }
        },
        {
          "name": "gen_customer_hdfs",
          "label": "Generate 1 Million Customer Data to HDFS in Parquet",
          "description": "Generate 1 Million Customer Data to HDFS in Parquet",
          "expectedExitCodes": [
            0
          ],
          "requiredRoleState": "running",
          "commandRunner": {
            "program": "scripts/generate_data.sh",
            "args": [
              "gen_customer_hdfs",
              "${app_port}",
              "${ssl_enabled}",
              "${admin_user}",
              "${admin_password}",
              "${use_extra_header}"
            ]
          }
        },
        {
          "name": "gen_customer_ozone",
          "label": "Generate 1 Million Customer Data to Ozone in Parquet",
          "description": "Generate 1 Million Customer Data to Ozone in Parquet",
          "expectedExitCodes": [
            0
          ],
          "requiredRoleState": "running",
          "commandRunner": {
            "program": "scripts/generate_data.sh",
            "args": [
              "gen_customer_ozone",
              "${app_port}",
              "${ssl_enabled}",
              "${admin_user}",
              "${admin_password}",
              "${use_extra_header}"
            ]
          }
        },
        {
          "name": "gen_transaction_hbase",
          "label": "Generate 1 Million Transactions to HBase",
          "description": "Generate 1 Million Transactions to HBase",
          "expectedExitCodes": [
            0
          ],
          "requiredRoleState": "running",
          "commandRunner": {
            "program": "scripts/generate_data.sh",
            "args": [
              "gen_transaction_hbase",
              "${app_port}",
              "${ssl_enabled}",
              "${admin_user}",
              "${admin_password}",
              "${use_extra_header}"
            ]
          }
        },
        {
          "name": "gen_sensor_hive",
          "label": "Generate 1 Million Sensors Data to Hive",
          "description": "Generate 1 Million Sensors Data to Hive",
          "expectedExitCodes": [
            0
          ],
          "requiredRoleState": "running",
          "commandRunner": {
            "program": "scripts/generate_data.sh",
            "args": [
              "gen_sensor_hive",
              "${app_port}",
              "${ssl_enabled}",
              "${admin_user}",
              "${admin_password}",
              "${use_extra_header}"
            ]
          }
        },
        {
          "name": "gen_public_service_kafka",
          "label": "Generate 1 Million Public Service Data to Kafka in Avro",
          "description": "Generate 1 Million Public Service Data to Kafka in Avro",
          "expectedExitCodes": [
            0
          ],
          "requiredRoleState": "running",
          "commandRunner": {
            "program": "scripts/generate_data.sh",
            "args": [
              "gen_public_service_kafka",
              "${app_port}",
              "${ssl_enabled}",
              "${admin_user}",
              "${admin_password}",
              "${use_extra_header}"
            ]
          }
        },
        {
          "name": "gen_public_service_kudu",
          "label": "Generate 1 Million Public Service Data to Kudu",
          "description": "Generate 1 Million Public Service Data to Kudu",
          "expectedExitCodes": [
            0
          ],
          "requiredRoleState": "running",
          "commandRunner": {
            "program": "scripts/generate_data.sh",
            "args": [
              "gen_public_service_kudu",
              "${app_port}",
              "${ssl_enabled}",
              "${admin_user}",
              "${admin_password}",
              "${use_extra_header}"
            ]
          }
        },
        {
          "name": "gen_weather_solr",
          "label": "Generate 1 Million Weather Data to SOLR",
          "description": "Generate 1 Million Weather Data to SOLR",
          "expectedExitCodes": [
            0
          ],
          "requiredRoleState": "running",
          "commandRunner": {
            "program": "scripts/generate_data.sh",
            "args": [
              "gen_weather_solr",
              "${app_port}",
              "${ssl_enabled}",
              "${admin_user}",
              "${admin_password}",
              "${use_extra_header}"
            ]
          }
        },
        {
          "name": "gen_weather_kafka",
          "label": "Generate 1 Million Weather Data to Kafka in JSON",
          "description": "Generate 1 Million Weather Data to Kafka in JSON",
          "expectedExitCodes": [
            0
          ],
          "requiredRoleState": "running",
          "commandRunner": {
            "program": "scripts/generate_data.sh",
            "args": [
              "gen_weather_kafka",
              "${app_port}",
              "${ssl_enabled}",
              "${admin_user}",
              "${admin_password}",
              "${use_extra_header}"
            ]
          }
        },
        {
          "name": "gen_local_data",
          "label": "Generate Local Data as CSV, JSON, AVRO, ORC, PARQUET",
          "description": "Generate Local Data as CSV, JSON, AVRO, ORC, PARQUET",
          "expectedExitCodes": [
            0
          ],
          "requiredRoleState": "running",
          "commandRunner": {
            "program": "scripts/generate_data.sh",
            "args": [
              "gen_local_data",
              "${app_port}",
              "${ssl_enabled}",
              "${admin_user}",
              "${admin_password}",
              "${use_extra_header}"
            ]
          }
        }
      ],
      "parameters": [
        {
          "name": "max_heap_size",
          "label": "Maximum Heap size",
          "description": "Maximum heap size specified as a JVM parameter to the application",
          "required": true,
          "configurableInWizard": true,
          "default": 8,
          "min": 1,
          "unit": "gigabytes",
          "type": "memory"
        },
        {
          "name": "number_of_batches",
          "label": "Number of Batches",
          "description": "The number of batch to run when launching a data generation",
          "required": true,
          "configurableInWizard": true,
          "default": 20,
          "min": 0,
          "type": "long"
        },
        {
          "name": "number_of_rows",
          "label": "Number of Rows",
          "description": "The number of row to run when launching a data generation",
          "required": true,
          "configurableInWizard": true,
          "default": 20,
          "min": 0,
          "type": "long"
        },
        {
          "name": "app_port",
          "label": "Web Server Port",
          "description": "Port that Web Server should expose",
          "required": true,
          "configurableInWizard": true,
          "default": 4242,
          "type": "port"
        },
        {
          "name": "threads",
          "label": "Thread Number",
          "description": "The number of parallel thread to launch data generation",
          "required": true,
          "configurableInWizard": true,
          "default": 10,
          "min": 1,
          "type": "long"
        },
        {
          "name": "ranger_url",
          "label": "Ranger URL",
          "description": "Ranger URM, used to push policies to Ranger (needed only once at startup) in this format: http://RANGER_HOST:RANGER_PORT. if this is not set, it is required to create your own policies in Ranger. Default push policies are on 'datagen*' and does not include specific paths that custom model may required",
          "required": true,
          "configurableInWizard": true,
          "default": "https://localhost:6182",
          "type": "string"
        },
        {
          "name": "ranger_user",
          "label": "Ranger admin user",
          "description": "Ranger user, used to push policies to Ranger (needed only once at startup). if this is not set, it is required to create your own policies in Ranger. Default push policies are on 'datagen*' and does not include specific paths that custom model may required",
          "required": true,
          "configurableInWizard": true,
          "default": "admin",
          "type": "string"
        },
        {
          "name": "ranger_password",
          "label": "Ranger Password of provided user",
          "description": "Ranger user's password, used to push policies to Ranger (needed only once at startup). if this is not set, it is required to create your own policies in Ranger. Default push policies are on 'datagen*' and does not include specific paths that custom model may required",
          "required": true,
          "configurableInWizard": true,
          "default": "admin",
          "type": "password"
        },
        {
          "name": "admin_user",
          "label": "Datagen admin user",
          "description": "The user to connect to Datagen Web Server",
          "required": true,
          "configurableInWizard": true,
          "default": "admin",
          "type": "string"
        },
        {
          "name": "admin_password",
          "label": "Datagen Admin Password",
          "description": "The password of the user to connect to Datagen Web Server",
          "required": true,
          "configurableInWizard": true,
          "default": "admin",
          "type": "password"
        },
        {
          "name": "java_home_custom",
          "label": "Custom JAVA_HOME",
          "description": "The JAVA_HOME path to use for Datagen Web Server. (By default, it is using the one provided by CM)",
          "required": false,
          "configurableInWizard": true,
          "default": "",
          "type": "string"
        },
        {
          "name": "use_extra_header",
          "label": "Datagen Use Extra Header for API calls from CM",
          "description": "To use a extra header with multipart/form-data when making calls from Cloudera Manager",
          "required": false,
          "configurableInWizard": false,
          "default": "false",
          "type": "boolean"
        },
        {
          "name": "hdfs_uri",
          "label": "HDFS URI",
          "description": "HDFS URI to connect to as: hdfs://NAMESERVICE:PORT/",
          "default": "",
          "type": "string"
        },
        {
          "name": "hbase_zk_quorum",
          "label": "HBASE Zookeeper Quorum",
          "description": "Zookeeper to connect to as: ZK_SERVER_1,ZK_SERVER_2,ZK_SERVER_3",
          "default": "",
          "type": "string"
        },
        {
          "name": "hbase_zk_quorum_port",
          "label": "HBASE Zookeeper Quorum Port",
          "description": "Zookeeper to connect to as: ZK_PORT",
          "default": "",
          "type": "port"
        },
        {
          "name": "hbase_znode_parent",
          "label": "HBASE Zookeeper Znode",
          "description": "Zookeeper znode as: ZNODE",
          "default": "",
          "type": "string"
        },
        {
          "name": "ozone_service_id",
          "label": "Ozone Service ID",
          "description": "Ozone service ID to connect to as: SERVICEID",
          "default": "",
          "type": "string"
        },
        {
          "name": "hive_zk_quorum",
          "label": "Hive Zookeeper Quorum",
          "description": "Zookeeper to connect to as: ZK_SERVER_1:ZK_PORT,ZK_SERVER_2:ZK_PORT,ZK_SERVER_3:ZK_PORT",
          "default": "",
          "type": "string"
        },
        {
          "name": "hive_znode",
          "label": "Hive Zookeeper Znode",
          "description": "Zookeeper znode as: ZNODE",
          "default": "",
          "type": "string"
        },
        {
          "name": "solr_zk_quorum",
          "label": "Solr Zookeepers",
          "description": "SolR Zookeepers as: ZK_SERVER_1:ZK_PORT,ZK_SERVER_2:ZK_PORT",
          "default": "",
          "type": "string"
        },
        {
          "name": "solr_znode",
          "label": "Solr Zookeeper Znode",
          "description": "SolR Zookeeper znode as: /ZNODE",
          "default": "/solr",
          "type": "string"
        },
        {
          "name": "solr_tls_enabled",
          "label": "Solr TLS",
          "description": "If SolR TLS is enabled",
          "default": "true",
          "type": "boolean"
        },
        {
          "name": "kafka_url",
          "label": "Kafka URL",
          "description": "Kafka URL as: KAFKA_SERVER_1:KAFKA_PORT,KAFKA_SERVER_2:KAFKA_PORT",
          "default": "",
          "type": "string"
        },
        {
          "name": "schema_registry_url",
          "label": "Schema Registry URL",
          "description": "Schema Registry URL as: SR_SERVER:SR_PORT",
          "default": "",
          "type": "string"
        },
        {
          "name": "schema_registry_tls_enabled",
          "label": "Schema Registry TLS",
          "description": "If Schema Registry TLS is enabled",
          "default": "true",
          "type": "boolean"
        },
        {
          "name": "kafka_protocol",
          "label": "Kafka Protocol",
          "description": "Kafka Protocol as one of proposed possibilities",
          "default": "SASL_SSL",
          "type": "string_enum",
          "validValues": [
            "PLAINTEXT",
            "SASL_PLAINTEXT",
            "SASL_SSL",
            "SSL"
          ]
        },
        {
          "name": "kafka_sasl_mechanism",
          "label": "Kafka SASL Mechanism",
          "description": "Kafka SASL Mechanism (should not be changed, except under particular circumstances)",
          "default": "GSSAPI",
          "type": "string"
        },
        {
          "name": "kafka_sasl_service_name",
          "label": "Kafka SASL Service Name",
          "description": "Kafka SASL Service Name (should not be changed, except under particular circumstances)",
          "default": "kafka",
          "type": "string"
        },
        {
          "name": "kudu_url",
          "label": "KUDU URL",
          "description": "Kudu URL as: KUDU_MASTER_1:KUDU_PORT,KUDU_MASTER_2:KUDU_PORT,KUDU_MASTER_3:KUDU_PORT",
          "default": "",
          "type": "string"
        },
        {
          "name": "s3_region",
          "label": "S3 Region",
          "description": "Name of the S3 Region where to generate data",
          "default": "eu-west-3",
          "type": "string"
        },
        {
          "name": "s3_access_key_id",
          "label": "S3 Access Key ID",
          "description": "ID of the S3 Access Key use to generate data",
          "default": "",
          "type": "string"
        },
        {
          "name": "s3_access_key_secret",
          "label": "S3 Access Key Secret",
          "description": "Secret of the S3 Access Key associated with the S3 access key ID",
          "default": "",
          "type": "password"
        },
        {
          "name": "adls_account_name",
          "label": "ADLS Storage Account Name",
          "description": "ADLS name of the storage account to use",
          "default": "",
          "type": "string"
        },
        {
          "name": "adls_account_type",
          "label": "ADLS Storage Account Type",
          "description": "ADLS Storage account ype, can only be: dfs or blob",
          "default": "dfs",
          "type": "string_enum",
          "validValues": [
            "dfs",
            "blob"
          ]
        },
        {
          "name": "adls_sas_token",
          "label": "ADLS SAS Token",
          "description": "ADLS SAS Token (Shared Access Token) use to authenticate to Azure",
          "default": "",
          "type": "password"
        },
        {
          "name": "gcs_project_id",
          "label": "Google Cloud Storage Project ID",
          "description": "Project ID in Google Cloud where to generate data",
          "default": "",
          "type": "string"
        },
        {
          "name": "gcs_account_key",
          "label": "Google Cloud Storage Account key path on local machine",
          "description": "(Optional): Google Cloud Storage Account key path. Use it only if no authentication has been set on where this server runs",
          "default": "",
          "type": "path",
          "pathType": "serviceSpecific",
          "mode": "0600"
        },
        {
          "name": "gcs_region",
          "label": "Google Cloud Region",
          "description": "(Optional): Google Cloud Region",
          "default": "EUROPE-WEST9",
          "type": "string"
        },
        {
          "name": "core_site_path",
          "label": "AUTO-DISCOVERY: Hadoop Core Site Path",
          "description": "Path to core-site.xml. This is used to auto-discover services: HDFS. (if settings are not explicitly set)",
          "default": "/etc/hadoop/conf/core-site.xml",
          "type": "path",
          "pathType": "serviceSpecific",
          "mode": "0755"
        },
        {
          "name": "hdfs_site_path",
          "label": "AUTO-DISCOVERY: Hadoop HDFS Site Path",
          "description": "Path to hdfs-site.xml. This is used to auto-discover services: HDFS. (if settings are not explicitly set)",
          "default": "/etc/hadoop/conf/hdfs-site.xml",
          "type": "path",
          "pathType": "serviceSpecific",
          "mode": "0755"
        },
        {
          "name": "ozone_site_path",
          "label": "AUTO-DISCOVERY: Hadoop Ozone Site Path",
          "description": "Path to ozone-site.xml. This is used to auto-discover services: OZONE. (if settings are not explicitly set)",
          "default": "/etc/hadoop/conf/ozone-site.xml",
          "type": "path",
          "pathType": "serviceSpecific",
          "mode": "0755"
        },
        {
          "name": "hbase_site_path",
          "label": "AUTO-DISCOVERY: Hadoop HBase Site Path",
          "description": "Path to hbase-site.xml. This is used to auto-discover services: HBASE. (if settings are not explicitly set)",
          "default": "/etc/hbase/conf/hbase-site.xml",
          "type": "path",
          "pathType": "serviceSpecific",
          "mode": "0755"
        },
        {
          "name": "hive_site_path",
          "label": "AUTO-DISCOVERY: Hadoop Hive Site Path",
          "description": "Path to core-site.xml. This is used to auto-discover services: HIVE. (if settings are not explicitly set)",
          "default": "/etc/hive/conf/hive-site.xml",
          "type": "path",
          "pathType": "serviceSpecific",
          "mode": "0755"
        },
        {
          "name": "solr_env_path",
          "label": "AUTO-DISCOVERY: Solr env.sh path",
          "description": "Path to solr-env.sh. This is used to auto-discover services: SOLR. (if settings are not explicitly set)",
          "default": "/etc/solr/conf/solr-env.sh",
          "type": "path",
          "pathType": "serviceSpecific",
          "mode": "0755"
        },
        {
          "name": "kafka_client_conf_path",
          "label": "AUTO-DISCOVERY: Kafka client cluster config properties Path",
          "description": "Path to kafka-cluster-config.properties This is used to auto-discover services: KAFKA. (if settings are not explicitly set)",
          "default": "",
          "type": "path",
          "pathType": "serviceSpecific",
          "mode": "0755"
        },
        {
          "name": "schema_registry_conf_path",
          "label": "AUTO-DISCOVERY: Schema Registry Configuration Path",
          "description": "Path to schema_registry_client.properties. This is used to auto-discover services: KAFKA & SCHEMA REGISTRY. (if settings are not explicitly set)",
          "default": "",
          "type": "path",
          "pathType": "serviceSpecific",
          "mode": "0755"
        },
        {
          "name": "kudu_conf_path",
          "label": "AUTO-DISCOVERY: Kudu configuration Path.",
          "description": "Path to Kudu Configuration File. This is used to auto-discover services: KUDU. (if settings are not explicitly set)",
          "default": "",
          "type": "path",
          "pathType": "serviceSpecific",
          "mode": "0755"
        },
        {
          "name": "datagen_home_dir",
          "label": "Datagen Home Directory",
          "description": "The local home directory",
          "default": "/home/datagen",
          "type": "path",
          "pathType": "serviceSpecific",
          "mode": "0750"
        },
        {
          "name": "data_model_received",
          "label": "Data Model Received Path",
          "description": "The path where to store locally data model received by API calls.",
          "default": "/home/datagen/models-received",
          "type": "path",
          "pathType": "serviceSpecific",
          "mode": "0750"
        },
        {
          "name": "data_model_generated",
          "label": "Data Model Generated Path",
          "description": "The path where to store locally data model generated by API calls.",
          "default": "/home/datagen/models-generated",
          "type": "path",
          "pathType": "serviceSpecific",
          "mode": "0750"
        },
        {
          "name": "data_model_store",
          "label": "Data Model Store Path",
          "description": "The path where to store locally data models",
          "default": "/home/datagen/models-store",
          "type": "path",
          "pathType": "serviceSpecific",
          "mode": "0700"
        },
        {
          "name": "scheduler_file_path",
          "label": "Scheduler File path",
          "description": "Where to store the internal scheduler file that lists all commands scheduled. It is used in case of restart of the application",
          "default": "/home/datagen/scheduler/commands.txt",
          "type": "path",
          "pathType": "serviceSpecific",
          "mode": "0700"
        },
        {
          "name": "commands_file_path",
          "label": "Commands directory",
          "description": "Where to store the internal status of commands and their information",
          "default": "/home/datagen/commands",
          "type": "path",
          "pathType": "serviceSpecific",
          "mode": "0700"
        },
        {
          "name": "load_default_models",
          "label": "Load Default models",
          "description": "Where to load default models at startup or not",
          "default": "true",
          "type": "boolean"
        },
        {
          "name": "credentials_file_path",
          "label": "Credentials directory",
          "description": "Where to store the internal stored credentials. This directory must be protected and point to a secure place, because credentials given by users are stored there",
          "default": "/home/datagen/credentials",
          "type": "path",
          "pathType": "serviceSpecific",
          "mode": "0700"
        },
        {
          "name": "analysis_file_path",
          "label": "Analysis directory",
          "description": "Where to store the internal status of analysis commands and their information",
          "default": "/home/datagen/analysis",
          "type": "path",
          "pathType": "serviceSpecific",
          "mode": "0700"
        },
        {
          "name": "cm_auto_discovery",
          "label": "Cloudera Manager Auto-discovery of services",
          "description": "To use CM (with an internal readOnly user) to make auto-discovery of services",
          "default": "true",
          "type": "boolean"
        },
        {
          "name": "ollama_base_url",
          "label": "Ollama Base URL",
          "description": "URL to contact Ollama running service in format: host:port",
          "default": "localhost:11434",
          "type": "string"
        },
        {
          "name": "ollama_model",
          "label": "Ollama Model",
          "description": "Name of the model deployed and to use with Ollama",
          "default": "mistral",
          "type": "string"
        },
        {
          "name": "ollama_temperature",
          "label": "Ollama Temperature",
          "description": "Temperature to set on request to the model when generating data",
          "default": 1.0,
          "type": "double"
        },
        {
          "name": "ollama_frequency_penalty",
          "label": "Ollama Frequency Penalty",
          "description": "Frequency Penalty to set on request to the model when generating data",
          "default": 2.0,
          "type": "double"
        },
        {
          "name": "ollama_presence_penalty",
          "label": "Ollama Presence Penalty",
          "description": "Presence Penalty to set on request to the model when generating data",
          "default": 2.0,
          "type": "double"
        },
        {
          "name": "ollama_top_p",
          "label": "Ollama TopP",
          "description": "Top P to set on request to the model when generating data",
          "default": 2.0,
          "type": "double"
        },
        {
          "name": "bedrock_region",
          "label": "Bedrock Region",
          "description": "AWS Bedrock Region",
          "default": "us-east-1",
          "type": "string"
        },
        {
          "name": "bedrock_model",
          "label": "Bedrock Model",
          "description": "Name of the model to choose and use in Bedrock",
          "default": "amazon.titan-text-lite-v1",
          "type": "string"
        },
        {
          "name": "bedrock_temperature",
          "label": "Bedrock Temperature",
          "description": "Temperature to set on request to the model when generating data",
          "default": 1.0,
          "type": "double"
        },
        {
          "name": "bedrock_max_tokens",
          "label": "Bedrock Max Tokens",
          "description": "Maximum Tokens to set on request to the model when generating data",
          "default": 256,
          "type": "long"
        },
        {
          "name": "bedrock_access_key_id",
          "label": "Bedrock Access Key ID",
          "description": "AWS Access Key ID to use Bedrock",
          "default": "",
          "type": "string"
        },
        {
          "name": "bedrock_access_key_secret",
          "label": "Bedrock Access Key Secret",
          "description": "AWS Access Key Secret to use Bedrock",
          "default": "",
          "type": "password"
        },
        {
          "name": "openai_key_name",
          "label": "OpenAI API Key name",
          "description": "Open API Key name (can be let as is, even if key ahs been uploaded)",
          "default": "test",
          "type": "string"
        },
        {
          "name": "openai_key",
          "label": "Open AI Key",
          "description": "OpenAI Key valid with a budget to send request to OpenAI",
          "default": "",
          "type": "password"
        },
        {
          "name": "openai_model",
          "label": "OpenAI Model",
          "description": "Name of the model deployed and to use with Open AI",
          "default": "gpt-4o",
          "type": "string"
        },
        {
          "name": "openai_temperature",
          "label": "OpenAI Temperature",
          "description": "Temperature to set on request to the model when generating data",
          "default": 1.0,
          "type": "double"
        },
        {
          "name": "openai_frequency_penalty",
          "label": "OpenAI Frequency Penalty",
          "description": "Frequency Penalty to set on request to the model when generating data",
          "default": 2.0,
          "type": "double"
        },
        {
          "name": "openai_presence_penalty",
          "label": "OpenAI Presence Penalty",
          "description": "Presence Penalty to set on request to the model when generating data",
          "default": 2.0,
          "type": "double"
        },
        {
          "name": "openai_top_p",
          "label": "OpenAI TopP",
          "description": "Top P to set on request to the model when generating data",
          "default": 2.0,
          "type": "double"
        },
        {
          "name": "openai_max_tokens",
          "label": "OpenAI max Tokens",
          "description": "Max Tokens to set on request to the model when generating data",
          "default": 256,
          "type": "long"
        },
        {
          "name": "local_llm_temperature",
          "label": "Local LLM Temperature",
          "description": "Temperature to set on request to the model when generating data",
          "default": 1.0,
          "type": "double"
        },
        {
          "name": "local_llm_frequence_penalty",
          "label": "Local LLM Frequency Penalty",
          "description": "Frequency Penalty to set on request to the model when generating data",
          "default": 2.0,
          "type": "double"
        },
        {
          "name": "local_llm_presence_penalty",
          "label": "Local LLM Presence Penalty",
          "description": "Presence Penalty to set on request to the model when generating data",
          "default": 2.0,
          "type": "double"
        },
        {
          "name": "local_llm_top_p",
          "label": "Local LLM TopP",
          "description": "Top P to set on request to the model when generating data",
          "default": 2.0,
          "type": "double"
        },
        {
          "name": "local_llm_max_tokens",
          "label": "Local LLM max Tokens",
          "description": "Max Tokens to set on request to the model when generating data",
          "default": 256,
          "type": "long"
        }
      ]
    }
  ]
}