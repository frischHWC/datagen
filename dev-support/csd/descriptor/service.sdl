{
  "name": "DATAGEN",
  "label": "Datagen",
  "description": "The service to generate Data into various services of CDP platform",
  "version": "1.0",
  "parcel": {
    "requiredTags": [
      "datagen"
    ],
    "optionalTags": [

    ]
  },
  "runAs": {
    "user": "datagen",
    "group": "datagen",
    "principal": "datagen"
  },
  "maxInstances": 1,
  "compatibility": {
    "generation": 2,
    "cdhVersion": {
      "min": "7.1.7",
      "max": "7.1.8"
    }
  },
  "rolesWithExternalLinks": [
    "DATAGEN_SERVER"
  ],
  "hdfsDirs": [
    {
      "name": "CreateUserHdfsHomeDirCommand",
      "label": "Create Datagen User Home Dir",
      "description": "Creates the Datagen user directory in HDFS",
      "directoryDescription": "Datagen HDFS user directory",
      "path": "/user/${user}",
      "permissions": "0755"
    }
  ],
  "serviceInit": {
    "preStartSteps": [
      {
        "commandName": "CreateUserHdfsHomeDirCommand"
      },
      {
        "commandName": "InitServiceCommand"
      }
    ]
  },
  "commands": [
    {
      "name": "InitServiceCommand",
      "label": "Initialize the service dirs and policies",
      "description": "Initialize Service by creating local dirs and ranger required policies",
      "roleCommand": "init_service",
      "roleName": "DATAGEN_SERVER",
      "runMode": "single"
    },
    {
      "name": "gen_customer",
      "label": "Generates 1M Customers to HDFS, Ozone and Hive",
      "description": "Generates 1M Customers to HDFS and Hive",
      "roleCommand": "gen_customer_hdfs_ozone_hive",
      "roleName": "DATAGEN_SERVER",
      "runMode": "single"
    },
    {
      "name": "gen_customer_hdfs",
      "label": "Generates 1M Customers to HDFS",
      "description": "Generates 1M Customers to HDFS",
      "roleCommand": "gen_customer_hdfs",
      "roleName": "DATAGEN_SERVER",
      "runMode": "single"
    },
    {
      "name": "gen_customer_ozone",
      "label": "Generates 1M Customers to Ozone",
      "description": "Generates 1M Customers to Ozone",
      "roleCommand": "gen_customer_ozone",
      "roleName": "DATAGEN_SERVER",
      "runMode": "single"
    },
    {
      "name": "gen_transaction",
      "label": "Generates 1M Transactions to HBase",
      "description": "Generates 1M Transactions to HBase",
      "roleCommand": "gen_transaction_hbase",
      "roleName": "DATAGEN_SERVER",
      "runMode": "single"
    },
    {
      "name": "gen_sensor",
      "label": "Generates 10M Sensors Data to Hive",
      "description": "Generates 10M Sensors Data to Hive",
      "roleCommand": "gen_sensor_hive",
      "roleName": "DATAGEN_SERVER",
      "runMode": "single"
    },
    {
      "name": "gen_public_service_kudu",
      "label": "Generates 1M Public Service Data to Kudu",
      "description": "Generates 1M Public Service Data to Kudu",
      "roleCommand": "gen_public_service_kudu",
      "roleName": "DATAGEN_SERVER",
      "runMode": "single"
    },
    {
      "name": "gen_public_service_kafka",
      "label": "Generates 1M Public Service Data to Kafka in Avro",
      "description": "Generates 1M Public Service Data to Kafka in Avro",
      "roleCommand": "gen_public_service_kafka",
      "roleName": "DATAGEN_SERVER",
      "runMode": "single"
    },
    {
      "name": "gen_weather_solr",
      "label": "Generates 1M Weather Data to SolR ",
      "description": "Generates 1M Weather Data to SolR",
      "roleCommand": "gen_weather_solr",
      "roleName": "DATAGEN_SERVER",
      "runMode": "single"
    },
    {
      "name": "gen_weather_kafka",
      "label": "Generates 1M Weather Data to Kafka in JSON",
      "description": "Generates 1M Weather Data to Kafka in JSON",
      "roleCommand": "gen_weather_kafka",
      "roleName": "DATAGEN_SERVER",
      "runMode": "single"
    },
    {
      "name": "gen_local",
      "label": "Generates Local Data as CSV, JSON, AVRO, ORC, PARQUET",
      "description": "Generates Local Data as CSV, JSON, AVRO, ORC, PARQUET",
      "roleCommand": "gen_local_data",
      "roleName": "DATAGEN_SERVER",
      "runMode": "single"
    }
  ],
  "kerberos": "${kerberos_enabled}",
  "parameters": [
    {
      "name": "kerberos_enabled",
      "label": "Kerberos Enabled",
      "description": "Set to true if Kerberos is enabled for services where data will be generated. Principal used is 'datagen' and keytab is generated by CM",
      "required": true,
      "configurableInWizard": true,
      "default": true,
      "type": "boolean"
    }
  ],
  "serviceDependencies": [
    {
      "name": "HDFS"
    },
    {
      "name": "HBASE"
    },
    {
      "name": "HIVE"
    },
    {
      "name": "KAFKA"
    },
    {
      "name": "KUDU"
    },
    {
      "name": "OZONE"
    },
    {
      "name": "SOLR"
    },
    {
      "name": "RANGER"
    },
    {
      "name": "SCHEMAREGISTRY"
    }
  ],
  "roles": [
    {
      "name": "DATAGEN_SERVER",
      "label": "Datagen Web Server",
      "pluralLabel": "Web Servers",
      "jvmBased": "true",
      "startRunner": {
        "program": "scripts/control.sh",
        "args": [
          "start"
        ],
        "environmentVariables": {
          "MAX_HEAP_SIZE": "${max_heap_size}",
          "SERVER_PORT": "${app_port}",
          "PRINCIPAL": "${principal}/${host}",
          "USER": "${user}",
          "HOST": "${host}",
          "TRUSTSTORE_LOCATION": "${ssl_client_truststore_location}",
          "TRUSTSTORE_PASSWORD": "${ssl_client_truststore_password}",
          "KEYSTORE_PASSWORD": "${ssl_server_keystore_password}",
          "KEYSTORE_KEYPASSWORD": "${ssl_server_keystore_keypassword}",
          "ADMIN_PASSWORD": "${admin_password}",
          "JAVA_HOME_CUSTOM": "${java_home_custom}"
        }
      },
      "configWriter": {
        "generators": [
          {
            "filename": "service.properties",
            "configFormat": "jinja",
            "template": "aux/templates/properties.j2"
          }
        ]
      },
      "kerberosPrincipals": [
        {
          "name": "datagen_principal",
          "primary": "${principal}",
          "instance": "${host}"
        }
      ],
        "metricsSource": {
          "metricsFormat": "SIMPLE",
          "httpSource": {
            "httpUrl": "http://${host}:${app_port}/metrics/all",
            "httpsUrl": "https://${host}:${app_port}/metrics/all",
            "sslEnabled": "${ssl_enabled}",
            "mtlsEnabled": "false",
            "kerberosEnabled": "false",
            "kerberosPrincipal": "${principal}"
          }
        },
      "sslServer": {
        "keystoreFormat": "jks",
        "keyIdentifier": "clientkey",
        "enabledConfigName": "tls_enabled",
        "keystoreLocationConfigName": "keystore_file",
        "keystorePasswordConfigName": "keystore_password",
        "keyPasswordOptionality": "optional",
        "keystoreKeyPasswordConfigName": "keystore_key_password",
        "keystorePasswordCredentialProviderCompatible": true,
        "keystoreKeyPasswordCredentialProviderCompatible": true,
        "autoTlsMode": "auto"
      },
      "sslClient": {
        "truststoreLocationConfigName": "truststore_location",
        "truststorePasswordConfigName": "truststore_password",
        "truststorePasswordCredentialProviderCompatible": true,
        "autoTlsMode": "auto"
      },
      "logging": {
        "dir": "/var/log/datagen",
        "filename": "datagen.log",
        "modifiable": true,
        "configName": "log.dir",
        "loggingType": "logback"
      },
      "externalLink": {
        "name": "datagen_swagger",
        "label": "Datagen Swagger Web UI",
        "url": "http://${host}:${app_port}/swagger-ui.html",
        "secureUrl": "https://${host}:${app_port}/swagger-ui.html"
      },
      "topology": {
        "minInstances": "0",
        "maxInstances": "100",
        "softMinInstances": "1",
        "softMaxInstances": "1",
        "requiresOddNumberOfInstances": "false"
      },
      "commands": [
        {
          "name": "init_service",
          "label": "Init service",
          "description": "Initializes the service by creating required dirs and Ranger policies",
          "expectedExitCodes": [
            0
          ],
          "requiredRoleState": "stopped",
          "commandRunner": {
            "program": "scripts/init.sh",
            "args": [
              "init"
            ],
            "environmentVariables": {
                "DATAGEN_USER": "${user}",
                "RANGER_SERVICE_NAME": "${dependency:RANGER}",
                "RANGER_URL": "${ranger_url}",
                "RANGER_ADMIN_USER": "${ranger_user}",
                "RANGER_ADMIN_PASSWORD": "${ranger_password}",
                "ADMIN_PASSWORD": "${admin_password}",
                "HBASE_SERVICE": "${dependency:HBASE}",
                "HDFS_SERVICE": "${dependency:HDFS}",
                "HIVE_SERVICE": "${dependency:HIVE}",
                "KAFKA_SERVICE": "${dependency:KAFKA}",
                "KUDU_SERVICE": "${dependency:KUDU}",
                "OZONE_SERVICE": "${dependency:OZONE}",
                "SCHEMAREGISTRY_SERVICE": "${dependency:SCHEMAREGISTRY}",
                "SOLR_SERVICE": "${dependency:SOLR}"
            }
          }
        },
        {
          "name": "gen_customer_hdfs_ozone_hive",
          "label": "Generates 1M Customers to HDFS and Hive and Ozone",
          "description": "Generates 1M Customers to HDFS and Hive and Ozone",
          "expectedExitCodes": [
            0
          ],
          "requiredRoleState": "running",
          "commandRunner": {
            "program": "scripts/generate_data.sh",
            "args": [
              "gen_customer_hdfs_ozone_hive",
              "${app_port}",
              "${ssl_enabled}",
              "${admin_user}",
              "${admin_password}"
            ]
          }
        },
       {
          "name": "gen_customer_hdfs",
          "label": "Generates 1M Customer Data to HDFS in Parquet",
          "description": "Generates 1M Customer Data to HDFS in Parquet",
          "expectedExitCodes": [
            0
          ],
          "requiredRoleState": "running",
          "commandRunner": {
            "program": "scripts/generate_data.sh",
            "args": [
              "gen_customer_hdfs",
              "${app_port}",
              "${ssl_enabled}",
              "${admin_user}",
              "${admin_password}"
            ]
          }
        },
        {
          "name": "gen_customer_ozone",
          "label": "Generates 1M Customer Data to Ozone in Parquet",
          "description": "Generates 1M Customer Data to Ozone in Parquet",
          "expectedExitCodes": [
            0
          ],
          "requiredRoleState": "running",
          "commandRunner": {
            "program": "scripts/generate_data.sh",
            "args": [
              "gen_customer_ozone",
              "${app_port}",
              "${ssl_enabled}",
              "${admin_user}",
              "${admin_password}"
            ]
          }
        },
        {
          "name": "gen_transaction_hbase",
          "label": "Generates 1M Transactions to HBase",
          "description": "Generates 1M Transactions to HBase",
          "expectedExitCodes": [
            0
          ],
          "requiredRoleState": "running",
          "commandRunner": {
            "program": "scripts/generate_data.sh",
            "args": [
              "gen_transaction_hbase",
              "${app_port}",
              "${ssl_enabled}",
              "${admin_user}",
              "${admin_password}"
            ]
          }
        },
        {
          "name": "gen_sensor_hive",
          "label": "Generates 10M Sensors Data to Hive",
          "description": "Generates 10M Sensors Data to Hive",
          "expectedExitCodes": [
            0
          ],
          "requiredRoleState": "running",
          "commandRunner": {
            "program": "scripts/generate_data.sh",
            "args": [
              "gen_sensor_hive",
              "${app_port}",
              "${ssl_enabled}",
              "${admin_user}",
              "${admin_password}"
            ]
          }
        },
        {
          "name": "gen_public_service_kafka",
          "label": "Generates 1M Public Service Data to Kafka in Avro",
          "description": "Generates 1M Public Service Data to Kafka in Avro",
          "expectedExitCodes": [
            0
          ],
          "requiredRoleState": "running",
          "commandRunner": {
            "program": "scripts/generate_data.sh",
            "args": [
              "gen_public_service_kafka",
              "${app_port}",
              "${ssl_enabled}",
              "${admin_user}",
              "${admin_password}"
            ]
          }
        },
        {
          "name": "gen_public_service_kudu",
          "label": "Generates 1M Public Service Data to Kudu",
          "description": "Generates 1M Public Service Data to Kudu",
          "expectedExitCodes": [
            0
          ],
          "requiredRoleState": "running",
          "commandRunner": {
            "program": "scripts/generate_data.sh",
            "args": [
              "gen_public_service_kudu",
              "${app_port}",
              "${ssl_enabled}",
              "${admin_user}",
              "${admin_password}"
            ]
          }
        },
        {
          "name": "gen_weather_solr",
          "label": "Generate 1M Weather Data to SOLR",
          "description": "Generate 1M Weather Data to SOLR",
          "expectedExitCodes": [
            0
          ],
          "requiredRoleState": "running",
          "commandRunner": {
            "program": "scripts/generate_data.sh",
            "args": [
              "gen_weather_solr",
              "${app_port}",
              "${ssl_enabled}",
              "${admin_user}",
              "${admin_password}"
            ]
          }
        },
        {
          "name": "gen_weather_kafka",
          "label": "Generate 1M Weather Data to Kafka in JSON",
          "description": "Generate 1M Weather Data to Kafka in JSON",
          "expectedExitCodes": [
            0
          ],
          "requiredRoleState": "running",
          "commandRunner": {
            "program": "scripts/generate_data.sh",
            "args": [
              "gen_weather_kafka",
              "${app_port}",
              "${ssl_enabled}",
              "${admin_user}",
              "${admin_password}"
            ]
          }
        },
        {
          "name": "gen_local_data",
          "label": "Generates Local Data as CSV, JSON, AVRO, ORC, PARQUET",
          "description": "Generates Local Data as CSV, JSON, AVRO, ORC, PARQUET",
          "expectedExitCodes": [
            0
          ],
          "requiredRoleState": "running",
          "commandRunner": {
            "program": "scripts/generate_data.sh",
            "args": [
              "gen_local_data",
              "${app_port}",
              "${ssl_enabled}",
              "${admin_user}",
              "${admin_password}"
            ]
          }
        }
      ],
      "parameters": [
        {
          "name": "max_heap_size",
          "label": "Maximum Heap size",
          "description": "Maximum heap size specified as a JVM parameter to the application",
          "required": true,
          "configurableInWizard": true,
          "default": 4,
          "min": 1,
          "unit": "gigabytes",
          "type": "memory"
        },
        {
          "name": "number_of_batches",
          "label": "Number of Batches",
          "description": "The number of batch to run when launching a data generation",
          "required": true,
          "configurableInWizard": true,
          "default": 20,
          "min": 0,
          "type": "long"
        },
        {
          "name": "number_of_rows",
          "label": "Number of Rows",
          "description": "The number of row to run when launching a data generation",
          "required": true,
          "configurableInWizard": true,
          "default": 20,
          "min": 0,
          "type": "long"
        },
        {
          "name": "data_model",
          "label": "Data Model",
          "description": "The Model of data to use to generate data",
          "required": true,
          "configurableInWizard": true,
          "default": "full-model.json",
          "type": "string_enum",
          "validValues": [
            "full-model.json",
            "customer/customer-china-model.json",
            "customer/customer-france-model.json",
            "customer/customer-germany-model.json",
            "customer/customer-india-model.json",
            "customer/customer-italy-model.json",
            "customer/customer-japan-model.json",
            "customer/customer-spain-model.json",
            "customer/customer-turkey-model.json",
            "customer/customer-usa-model.json",
            "finance/transaction-model.json",
            "industry/sensor-model.json",
            "industry/sensor-data-model.json",
            "industry/plant-model.json",
            "public_service/incident-model.json",
            "public_service/intervention-team-model.json",
            "public_service/weather-model.json",
            "public_service/weather-sensor-model.json"
          ]
        },
        {
          "name": "app_port",
          "label": "Web Server Port",
          "description": "Port that Web Server should expose",
          "required": true,
          "configurableInWizard": true,
          "default": 4242,
          "type": "port"
        },
        {
          "name": "threads",
          "label": "Thread Number",
          "description": "The number of parallel thread to launch data generation",
          "required": true,
          "configurableInWizard": true,
          "default": 1,
          "min": 1,
          "type": "long"
        },
        {
          "name": "ranger_url",
          "label": "Ranger URL",
          "description": "Ranger URM, used to push policies to Ranger (needed only once at startup) in this format: http://<RANGER_HOST>:<RANGER_PORT>. if this is not set, it is required to create your own policies in Ranger. Default push policies are on 'datagen*' and does not include specific paths that custom model may required",
          "required": true,
          "configurableInWizard": true,
          "default": "https://localhost:6182",
          "type": "string"
        },
        {
          "name": "ranger_user",
          "label": "Ranger admin user",
          "description": "Ranger user, used to push policies to Ranger (needed only once at startup). if this is not set, it is required to create your own policies in Ranger. Default push policies are on 'datagen*' and does not include specific paths that custom model may required",
          "required": true,
          "configurableInWizard": true,
          "default": "admin",
          "type": "string"
        },
        {
          "name": "ranger_password",
          "label": "Ranger Password of provided user",
          "description": "Ranger user's password, used to push policies to Ranger (needed only once at startup). if this is not set, it is required to create your own policies in Ranger. Default push policies are on 'datagen*' and does not include specific paths that custom model may required",
          "required": true,
          "configurableInWizard": true,
          "default": "admin",
          "type": "password"
        },
        {
          "name": "admin_user",
          "label": "Datagen admin user",
          "description": "The user to connect to Datagen Web Server",
          "required": true,
          "configurableInWizard": true,
          "default": "admin",
          "type": "string"
        },
        {
          "name": "admin_password",
          "label": "Datagen Admin Password",
          "description": "The password of the user to connect to Datagen Web Server",
          "required": true,
          "configurableInWizard": true,
          "default": "admin",
          "type": "password"
        },
        {
          "name": "java_home_custom",
          "label": "Custom JAVA_HOME",
          "description": "The JAVA_HOME path to use for Datagen Web Server. (By default, it is using the one provided by CM)",
          "required": false,
          "default": "",
          "type": "string"
        },


        {
          "name": "hdfs_uri",
          "label": "HDFS URI",
          "description": "HDFS URI to connect to as: hdfs://<NAMESERVICE>:<PORT>/",
          "default": "",
          "type": "string"
        },
        {
          "name": "hbase_zk_quorum",
          "label": "HBASE Zookeeper Quorum",
          "description": "Zookeeper to connect to as: <ZK_SERVER_1>,<ZK_SERVER_2>,<ZK_SERVER_3>",
          "default": "",
          "type": "string"
        },
        {
          "name": "hbase_zk_quorum_port",
          "label": "HBASE Zookeeper Quorum Port",
          "description": "Zookeeper to connect to as: <ZK_PORT>",
          "default": "",
          "type": "port"
        },
        {
          "name": "hbase_znode_parent",
          "label": "HBASE Zookeeper Znode",
          "description": "Zookeeper znode as: <ZNODE>",
          "default": "",
          "type": "string"
        },
        {
          "name": "ozone_service_id",
          "label": "Ozone Service ID",
          "description": "Ozone service ID to connect to as: <SERVICEID>",
          "default": "",
          "type": "string"
        },
        {
          "name": "hive_zk_quorum",
          "label": "Hive Zookeeper Quorum",
          "description": "Zookeeper to connect to as: <ZK_SERVER_1>:<ZK_PORT>,<ZK_SERVER_2>:<ZK_PORT>,<ZK_SERVER_3>:<ZK_PORT>",
          "default": "",
          "type": "string"
        },
        {
          "name": "hive_znode",
          "label": "Hive Zookeeper Znode",
          "description": "Zookeeper znode as: <ZNODE>",
          "default": "",
          "type": "string"
        },
        {
          "name": "solr_zk_quorum",
          "label": "Solr Zookeepers",
          "description": "SolR Zookeepers as: <ZK_SERVER_1>:<ZK_PORT>,<ZK_SERVER_2>:<ZK_PORT>",
          "default": "",
          "type": "string"
        },
        {
          "name": "solr_znode",
          "label": "Solr Zookeeper Znode",
          "description": "SolR Zookeeper znode as: /<ZNODE>",
          "default": "/solr",
          "type": "string"
        },
        {
          "name": "solr_tls_enabled",
          "label": "Solr TLS",
          "description": "If SolR TLS is enabled",
          "default": "true",
          "type": "boolean"
        },
        {
          "name": "kafka_url",
          "label": "Kafka URL",
          "description": "Kafka URL as: <KAFKA_SERVER_1>:<KAFKA_PORT>,<KAFKA_SERVER_2>:<KAFKA_PORT>",
          "default": "",
          "type": "string"
        },
        {
          "name": "schema_registry_url",
          "label": "Schema Registry URL",
          "description": "Schema Registry URL as: <SR_SERVER>:<SR_PORT>",
          "default": "",
          "type": "string"
        },
        {
          "name": "schema_registry_tls_enabled",
          "label": "Schema Registry TLS",
          "description": "If Schema Registry TLS is enabled",
          "default": "true",
          "type": "boolean"
        },
        {
          "name": "kafka_protocol",
          "label": "Kafka Protocol",
          "description": "Kafka Protocol as one of proposed possibilities",
          "default": "SASL_SSL",
          "type": "string_enum",
          "validValues": [
            "PLAINTEXT",
            "SASL_PLAINTEXT",
            "SASL_SSL",
            "SSL"
          ]
        },
        {
          "name": "kafka_sasl_mechanism",
          "label": "Kafka SASL Mechanism",
          "description": "Kafka SASL Mechanism (should not be changed, except under particular circumstances)",
          "default": "GSSAPI",
          "type": "string"
        },
        {
          "name": "kafka_sasl_service_name",
          "label": "Kafka SASL Service Name",
          "description": "Kafka SASL Service Name (should not be changed, except under particular circumstances)",
          "default": "kafka",
          "type": "string"
        },
        {
          "name": "kudu_url",
          "label": "KUDU URL",
          "description": "Kudu URL as: <KUDU_MASTER_1>,<KUDU_MASTER_2>,<KUDU_MASTER_3>",
          "default": "",
          "type": "string"
        },
        {
          "name": "core_site_path",
          "label": "AUTO-DISCOVERY: Hadoop Core Site Path",
          "description": "Path to core-site.xml. This is used to auto-discover services: HDFS. (if settings are not explicitly set)",
          "default": "/etc/hadoop/conf/core-site.xml",
          "type": "path",
          "pathType": "serviceSpecific",
          "mode": "0755"
        },
        {
          "name": "hdfs_site_path",
          "label": "AUTO-DISCOVERY: Hadoop HDFS Site Path",
          "description": "Path to hdfs-site.xml. This is used to auto-discover services: HDFS. (if settings are not explicitly set)",
          "default": "/etc/hadoop/conf/hdfs-site.xml",
          "type": "path",
          "pathType": "serviceSpecific",
          "mode": "0755"
        },
        {
          "name": "ozone_site_path",
          "label": "AUTO-DISCOVERY: Hadoop Ozone Site Path",
          "description": "Path to ozone-site.xml. This is used to auto-discover services: OZONE. (if settings are not explicitly set)",
          "default": "/etc/hadoop/conf/ozone-site.xml",
          "type": "path",
          "pathType": "serviceSpecific",
          "mode": "0755"
        },
        {
          "name": "hbase_site_path",
          "label": "AUTO-DISCOVERY: Hadoop HBase Site Path",
          "description": "Path to hbase-site.xml. This is used to auto-discover services: HBASE. (if settings are not explicitly set)",
          "default": "/etc/hbase/conf/hbase-site.xml",
          "type": "path",
          "pathType": "serviceSpecific",
          "mode": "0755"
        },
        {
          "name": "hive_site_path",
          "label": "AUTO-DISCOVERY: Hadoop Hive Site Path",
          "description": "Path to core-site.xml. This is used to auto-discover services: HIVE. (if settings are not explicitly set)",
          "default": "/etc/hive/conf/hive-site.xml",
          "type": "path",
          "pathType": "serviceSpecific",
          "mode": "0755"
        },
        {
          "name": "solr_env_path",
          "label": "AUTO-DISCOVERY: Solr env.sh path",
          "description": "Path to solr-env.sh. This is used to auto-discover services: SOLR. (if settings are not explicitly set)",
          "default": "/etc/solr/conf/solr-env.sh",
          "type": "path",
          "pathType": "serviceSpecific",
          "mode": "0755"
        },
        {
          "name": "kafka_client_conf_path",
          "label": "AUTO-DISCOVERY: Kafka client conf Path",
          "description": "Path to kafka-client.conf. This is used to auto-discover services: KAFKA. (if settings are not explicitly set)",
          "default": "/etc/kafka/conf/kafka-client.conf",
          "type": "path",
          "pathType": "serviceSpecific",
          "mode": "0755"
        },
        {
          "name": "schema_registry_conf_path",
          "label": "AUTO-DISCOVERY: Schema Registry Configuration Path",
          "description": "Path to schema_registry_client.properties. This is used to auto-discover services: KAFKA & SCHEMA REGISTRY. (if settings are not explicitly set)",
          "default": "/etc/schemaregistry/conf/schema_registry_client.properties",
          "type": "path",
          "pathType": "serviceSpecific",
          "mode": "0755"
        },
        {
          "name": "kudu_conf_path",
          "label": "AUTO-DISCOVERY: Kudu configuration Path.",
          "description": "Path to Kudu Confiuration File. This is used to auto-discover services: KUDU. (if settings are not explicitly set)",
          "default": "",
          "type": "path",
          "pathType": "serviceSpecific",
          "mode": "0755"
        },
        {
          "name": "custom_model_path",
          "label": "Custom Model Path",
          "description": "The custom Model Path to use instead of the furnished data model. This file must exists on the machine where the web server is installed. Learn how to create a model here: https://github.com/frischHWC/random-datagen#data-generated",
          "default": "",
          "type": "path",
          "pathType": "serviceSpecific",
          "mode": "0755"
        },
        {
          "name": "scheduler_file_path",
          "label": "Scheduler File path",
          "description": "Where to store the internal scheduler file that lists all commands scheduled. It is used in case of restart of the application",
          "default": "/home/datagen/scheduler/commands.txt",
          "type": "path",
          "pathType": "serviceSpecific",
          "mode": "0700"
        }
      ]
    }
  ]
}