---
- name: Check CM is TLS
  uri:
    url: "https://{{ cloudera_manager_host }}:7183/"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200, -1, 304
    return_content: yes
    validate_certs: no
  register: cluster_deployment
  when: cloudera_manager_protocol is not defined and cloudera_manager_port is not defined

- set_fact:
    cloudera_manager_protocol: https
    cloudera_manager_port: 7183
  when: cloudera_manager_protocol is not defined and cloudera_manager_port is not defined and cluster_deployment.status == 200

- name: Check CM is no-TLS
  uri:
    url: "http://{{ cloudera_manager_host }}:7180/"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200, -1, 304
    return_content: yes
    validate_certs: no
  register: cluster_deployment
  when: cloudera_manager_protocol is not defined and cloudera_manager_port is not defined

- set_fact:
    cloudera_manager_protocol: http
    cloudera_manager_port: 7180
  when: cloudera_manager_protocol is not defined and cloudera_manager_port is not defined and cluster_deployment.status == 200

- set_fact:
    cloudera_manager_url: "{{ cloudera_manager_protocol }}://{{ cloudera_manager_host }}:{{ cloudera_manager_port }}"

- name: DEBUG - cloudera_manager_url
  debug:
    msg: "{{ cloudera_manager_url }}"
  when: debug | default(false)


- name: Get CM API Version
  uri:
    url: "{{ cloudera_manager_url }}/api/version"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
    body_format: json
  register: cloudera_manager_api_version_response
  when: cloudera_manager_api_version is not defined

- set_fact:
    cloudera_manager_api_version: "{{ cloudera_manager_api_version_response.content }}"
  when: cloudera_manager_api_version is not defined  

- set_fact:
    cloudera_manager_api_url: "{{ cloudera_manager_url }}/api/{{ cloudera_manager_api_version }}"

- name: DEBUG - cloudera_manager_api_url
  debug:
    msg: "{{ cloudera_manager_api_url }}"
  when: debug | default(false)

- set_fact:
    truststore_location: "/tmp/truststore.jks"
  when: truststore_location is not defined

- name: Get truststore content into a file
  uri:
    url: "{{ cloudera_manager_api_url }}/certs/truststore?type=jks"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
    body_format: json
    dest: "{{ truststore_location }}"
  register: cloudera_manager_truststore_content

- name: Get truststore password
  uri:
    url: "{{ cloudera_manager_api_url }}/certs/truststorePassword"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
    body_format: json
  register: cloudera_manager_truststore_password_api

- name: DEBUG - API truststore password
  debug:
    msg: "{{ cloudera_manager_truststore_password_api.content }}"
  when: debug | default(false)

- set_fact:
    truststore_password: "{{ cloudera_manager_truststore_password_api.content }}"
  when: truststore_password is not defined


- name: Get CM deployment
  uri:
    url: "{{ cloudera_manager_api_url }}/cm/deployment"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
    body_format: json
  register: cloudera_manager_deployment


- set_fact:
    cdp_version: "{{ cloudera_manager_deployment.json | community.general.json_query(query) }}"
  vars:
    query: "clusters[?name == '{{ cluster_name }}' ].fullVersion | [0]"

- set_fact:
    cdp_patch_full_version: "{{ cloudera_manager_deployment.json | community.general.json_query(query) }}"
  vars:
    query: "clusters[?name == '{{ cluster_name }}' ] | [0] | parcels[?product == 'CDH' ].version | [0]"

- name: DEBUG - cdp_patch_full_version
  debug:
    msg: "{{ cdp_patch_full_version }}"
  when: debug | default(false)

- set_fact:
    cdp_patch_version: "{{ cdp_patch_full_version.split('cdh')[1].split('p')[1].split('.')[0] }}"

- name: DEBUG - cdp_patch_version
  debug:
    msg: "{{ cdp_patch_version }}"
  when: debug | default(false)

- set_fact:
    cdp_patch_version_exists: "{{ false if cdp_patch_version == '' else true }}"

- set_fact:
    cdp_version: "{{ cdp_version }}.{{ cdp_patch_version }}"
  when: cdp_patch_version_exists | default(false)

- name: DEBUG - cdp_version
  debug:
    msg: "{{ cdp_version }}"
  when: debug | default(false)

- name: Get CM Kerberos Info
  uri:
    url: "{{ cloudera_manager_api_url }}/cm/kerberosInfo"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
    body_format: json
  register: cloudera_manager_krb_info

- set_fact: 
    kerberos_activated: "{{ cloudera_manager_krb_info.json | community.general.json_query(query) }}"
  vars:
    query: "kerberized"

- name: DEBUG - kerberos_activated
  debug:
    msg: "{{ kerberos_activated }}"
  when: debug | default(false)

- set_fact: 
    krb_realm: "{{ cloudera_manager_krb_info.json | community.general.json_query(query) }}"
  vars:
    query: "kerberosRealm"
  when: kerberos_activated

- name: DEBUG - krb_realm
  debug:
    msg: "{{ krb_realm }}"
  when: debug | default(false) and kerberos_activated

# Set Keystore

- set_fact:
    keystore: "/var/lib/cloudera-scm-agent/agent-cert/cm-auto-host_keystore.jks"
  when: keystore is not defined

- name: DEBUG - keystore
  debug:
    msg: "{{ keystore }}"
  when: debug | default(false)

- name: Get keystore password if not defined
  slurp:
    src: /var/lib/cloudera-scm-agent/agent-cert/cm-auto-host_key.pw
  register: keystore_password

- name: DEBUG - keystore_password
  debug:
    msg: "{{ keystore_password['content'] | b64decode }}"
  when: debug | default(false)  

- set_fact:
    keystore_pass: "{{ keystore_password['content'] | b64decode }}"
  when: keystore_pass is not defined

- name: DEBUG - keystore_pass
  debug:
    msg: "{{ keystore_pass }}"
  when: debug | default(false)

- set_fact:
    keystore_key_pass: "{{ keystore_password['content'] | b64decode }}"
  when: keystore_key_pass is not defined

- name: DEBUG - keystore_key_pass
  debug:
    msg: "{{ keystore_key_pass }}"
  when: debug | default(false)

- name: Get Cluster TLS Info
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/isTlsEnabled"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
  register: tls_cluster_info

- set_fact:
    tls_activated: "{{ tls_cluster_info.content }}"

- name: DEBUG - tls_activated
  debug:
    msg: "{{ tls_activated }}"
  when: debug | default(false)


# Get all services from CM (used later by each service config)

- name: Get All services from CM
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/services/"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
    body_format: json
  register: cloudera_manager_all_services

- name: DEBUG - cluster_name_streaming
  debug:
    msg: "{{ cluster_name_streaming }}"
  when: debug | default(false)

- name: Get All services from CM for streaming cluster (Kafka + SR)
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name_streaming }}/services/"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
    body_format: json
  register: cloudera_manager_all_services_streaming
