---
- name: Clone CM_EXT Repository
  git:
    repo: "https://github.com/cloudera/cm_ext"
    dest: "{{ target_dir }}/cm_ext/"
    version: "master"

- name: Create Manifest.json
  shell:
    cmd: "python make_manifest.py {{ target_dir }}/parcel/"
    chdir: "{{ target_dir }}/cm_ext/make_manifest/"

- name: Slurp manifest.json 
  slurp:
    path: "{{ target_dir }}/parcel/manifest.json"
  register: manifest_content

- name: Set Manifest content decoded
  set_fact:
    manifest_content_decoded: "{{ manifest_content.content | b64decode }}"

- name: DEBUG - manifest_content_decoded
  debug:
    msg: "{{ manifest_content_decoded }}"
  when: debug | default(false)

- name: Get Hash from Manifest.json
  set_fact:
    parcel_hash: "{{ manifest_content_decoded | community.general.json_query(query) }}"
  vars:
    query: "parcels[0].hash"
    
- name: DEBUG - parcel_hash
  debug:
    msg: "{{ parcel_hash }}"
  when: debug | default(false)

- name: Push hash in the hash file
  shell:
    cmd: "echo {{ parcel_hash }} >> {{ target_dir }}/parcel/{{ parcel_name }}.sha"


- name: Install HTTPD
  package:
    name: httpd
    state: present    

- name: Stop HTTPD
  systemd:
    state: stopped
    name: httpd

- name: Clean Directory of HTTPD
  file:
    path: "/var/www/html/datagen-repo/"
    state: absent

- name: Create Directory for HTTPD
  file:
    path: "/var/www/html/datagen-repo/"
    state: directory
    mode: '0755'


- name: Copy manifest.json
  copy:
    src: "{{ target_dir }}/parcel/manifest.json"
    dest: "/var/www/html/datagen-repo/manifest.json"
    mode: '0755'
    remote_src: true

- name: Copy parcel
  copy:
    src: "{{ target_dir }}/parcel/{{ parcel_name }}.parcel"
    dest: "/var/www/html/datagen-repo/{{ parcel_name }}.parcel"
    mode: '0755'
    remote_src: true

- name: Copy parcel's hash
  copy:
    src: "{{ target_dir }}/parcel/{{ parcel_name }}.sha"
    dest: "/var/www/html/datagen-repo/{{ parcel_name }}.sha"
    mode: '0755'
    remote_src: true

- name: Start HTTPD
  systemd:
    state: started
    name: httpd


- name: Get CM full config
  uri:
    url: "{{ cloudera_manager_api_url }}/cm/config"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
    body_format: json
  register: cm_full_config

- set_fact:
    repos_url: "{{ cm_full_config.json | community.general.json_query(query) }}"
  vars:
    query: "items[?name == 'REMOTE_PARCEL_REPO_URLS'].value | [0]"

- name: DEBUG - repos_url
  debug:
    msg: "{{ repos_url }}"
  when: debug | default(false)  


- name: Push repo of HTTPD
  uri:
    url: "{{ cloudera_manager_api_url }}/cm/config"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: PUT
    body_format: json
    body:  "{{ lookup('template', 'repos_url.json' ) }}"
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no

- name: Pause to acknowledge parcels
  pause:
    seconds: 5

### Download and activate DATAGEN ###
- name: Start Download
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/parcels/products/DATAGEN/versions/{{ dg_full_version }}/commands/startDownload"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: POST
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
  register: download_answer

- name: Check DATAGEN is downloaded
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/parcels/products/DATAGEN/versions/{{ dg_full_version }}"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
    method: GET
  register: dg_download
  until: dg_download.json.stage == "DOWNLOADED" or dg_download.json.stage == "DISTRIBUTED" or dg_download.json.stage == "ACTIVATED"
  retries: 100
  delay: 30

- name: Start distribution
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/parcels/products/DATAGEN/versions/{{ dg_full_version }}/commands/startDistribution"
    method: POST
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no

- name: Check DATAGEN is distributed
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/parcels/products/DATAGEN/versions/{{ dg_full_version }}"
    method: GET
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
  register: dg_download
  until: dg_download.json.stage == "DISTRIBUTED" or dg_download.json.stage == "ACTIVATED"
  retries: 100
  delay: 30

- name: Activate DATAGEN parcel
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/parcels/products/DATAGEN/versions/{{ dg_full_version }}/commands/activate"
    method: POST
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no

- name: Check DATAGEN is activated
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/parcels/products/DATAGEN/versions/{{ dg_full_version }}"
    method: GET
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
  register: dg_download
  until: dg_download.json.stage == "ACTIVATED"
  retries: 100
  delay: 30
