---
- name: Get All Hosts
  uri:
    url: "{{ cloudera_manager_api_url }}/hosts"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
  register: all_hosts

- name: Set hostId
  set_fact:
    edge_host_id: "{{ all_hosts.json | community.general.json_query(query) }}"
  vars:
    query: "items[?hostname == '{{ edge_host }}' ].hostId | [0]"

- name: DEBUG - edge_host_id
  debug:
    msg: "{{ edge_host_id }}"
  when: debug | default(false)

- name: Add Datagen service to CM
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/services"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: POST
    body_format: json
    body:  "{{ lookup('template', 'datagen_service.json' ) }}"
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no

- name: Check DATAGEN exists
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/services/datagen"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
    method: GET
  register: dg_status
  until: dg_status.json.serviceState == "STOPPED"
  retries: 100
  delay: 1

#- name: Set Thresholds for heahlth tests
#  uri:
#    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/services/datagen/roleConfigGroups/datagen-DATAGEN_SERVER-BASE/config"
#    user: "{{ cloudera_manager_user }}"
#    password: "{{ cloudera_manager_password }}"
#    method: PUT
#    body_format: json
#    body:  "{{ lookup('template', 'thresholds.json' ) }}"
#    force_basic_auth: yes
#    status_code: 200
#    return_content: yes
#    validate_certs: no

- name: Set TLS properties if needed
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/services/datagen/roleConfigGroups/datagen-DATAGEN_SERVER-BASE/config"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: PUT
    body_format: json
    body:  "{{ lookup('file', 'datagen_service_tls_configs.json' ) }}"
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
  when: tls_activated


- name: Set Ranger dependency if needed
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/services/datagen/config"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: PUT
    body_format: json
    body:  "{{ lookup('template', 'dependency.json' ) }}"
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
  vars:
    dependency_service: "ranger_service"
    dependency_name: "{{ ranger_name }}"
  when: ranger_name != '' and ranger_name != 'none'


- name: Wait to acknowledge new configs
  pause:
    seconds: 5

- name: Initialize hdfs dir for Datagen service
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/services/datagen/commands/CreateUserHdfsHomeDirCommand"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: POST
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no

- name: Check that no command is currently running on the service
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/services/datagen/commands"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
    body_format: json
  register: result
  until: result.content|length == 19
  retries: 60
  delay: 30

- name: Initialize Ranger Policies for Datagen service
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/services/datagen/commands/InitServiceCommand"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: POST
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no

- name: Check that no command is currently running on the service
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/services/datagen/commands"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
    body_format: json
  register: result
  until: result.content|length == 19
  retries: 60
  delay: 30

- name: Start Datagen Service
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/services/datagen/commands/start"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: POST
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no

- name: Restart of CMS to acknowledge new metrics
  uri:
    url: "{{ cloudera_manager_api_url }}/cm/service/commands/restart"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: POST
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no