---
- name: Get All Hosts
  uri:
    url: "{{ cloudera_manager_api_url }}/hosts"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
  register: all_hosts

- name: Set hostId
  set_fact:
    edge_host_id: "{{ all_hosts.json | community.general.json_query(query) }}"
  vars:
    query: "items[?hostname == '{{ edge_host }}' ].hostId | [0]"

- name: DEBUG - edge_host_id
  debug:
    msg: "{{ edge_host_id }}"
  when: debug | default(false)

- name: Add Datagen service to CM
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/services"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: POST
    body_format: json
    body:  "{{ lookup('template', 'datagen_service.json' ) }}"
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no

- name: Check DATAGEN exists
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/services/datagen"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
    method: GET
  register: dg_status
  until: dg_status.json.serviceState == "STOPPED"
  retries: 100
  delay: 1

- name: Set TLS properties if needed
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/services/datagen/roleConfigGroups/datagen-DATAGEN_SERVER-BASE/config"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: PUT
    body_format: json
    body:  "{{ lookup('file', 'datagen_service_tls_configs.json' ) }}"
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
  when: tls_activated

- name: Set SolR properties if needed
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/services/datagen/roleConfigGroups/datagen-DATAGEN_SERVER-BASE/config"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: PUT
    body_format: json
    body:  "{{ lookup('template', 'solr_config.json' ) }}"
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
  when: solr_exists

- name: Set Kudu properties if needed
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/services/datagen/roleConfigGroups/datagen-DATAGEN_SERVER-BASE/config"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: PUT
    body_format: json
    body:  "{{ lookup('template', 'kudu_config.json' ) }}"
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
  when: kudu_exists

- name: Set Kafka properties if needed
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/services/datagen/roleConfigGroups/datagen-DATAGEN_SERVER-BASE/config"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: PUT
    body_format: json
    body:  "{{ lookup('template', 'kafka_config.json' ) }}"
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
  when: kafka_exists

- name: Set Schema Registry properties if needed
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/services/datagen/roleConfigGroups/datagen-DATAGEN_SERVER-BASE/config"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: PUT
    body_format: json
    body:  "{{ lookup('template', 'sr_config.json' ) }}"
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
  when: sr_exists

# Add dependency one by one
- name: Set HDFS dependency if needed
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/services/datagen/config"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: PUT
    body_format: json
    body:  "{{ lookup('template', 'dependency.json' ) }}"
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
  vars:
    dependency_service: "hdfs_service"
    dependency_name: "{{ hdfs_name }}"
  when: hdfs_name != '' and hdfs_name != 'none'

- name: Set HBase dependency if needed
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/services/datagen/config"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: PUT
    body_format: json
    body:  "{{ lookup('template', 'dependency.json' ) }}"
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
  vars:
    dependency_service: "hbase_service"
    dependency_name: "{{ hbase_name }}"
  when: hbase_name != '' and hbase_name != 'none'

- name: Set Hive dependency if needed
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/services/datagen/config"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: PUT
    body_format: json
    body:  "{{ lookup('template', 'dependency.json' ) }}"
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
  vars:
    dependency_service: "hive_service"
    dependency_name: "{{ hive_name }}"
  when: hive_name != '' and hive_name != 'none'

- name: Set Kafka dependency if needed
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/services/datagen/config"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: PUT
    body_format: json
    body:  "{{ lookup('template', 'dependency.json' ) }}"
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
  vars:
    dependency_service: "kafka_service"
    dependency_name: "{{ kafka_name }}"
  when: kafka_name != '' and kafka_name != 'none'

- name: Set Kudu dependency if needed
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/services/datagen/config"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: PUT
    body_format: json
    body:  "{{ lookup('template', 'dependency.json' ) }}"
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
  vars:
    dependency_service: "kudu_service"
    dependency_name: "{{ kudu_name }}"
  when: kudu_name != '' and kudu_name != 'none'

- name: Set Ozone dependency if needed
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/services/datagen/config"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: PUT
    body_format: json
    body:  "{{ lookup('template', 'dependency.json' ) }}"
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
  vars:
    dependency_service: "ozone_service"
    dependency_name: "{{ ozone_name }}"
  when: ozone_name != '' and ozone_name != 'none'

# Adding SolR as a dependency makes commands fail, so do not add it
#- name: Set SolR dependency if needed
#  uri:
#    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/services/datagen/config"
#    user: "{{ cloudera_manager_user }}"
#    password: "{{ cloudera_manager_password }}"
#    method: PUT
#    body_format: json
#    body:  "{{ lookup('template', 'dependency.json' ) }}"
#    force_basic_auth: yes
#    status_code: 200
#    return_content: yes
#    validate_certs: no
#  vars:
#    dependency_service: "solr_service"
#    dependency_name: "{{ solr_name }}"
#  when: solr_name != '' and solr_name != 'none'

- name: Set Ranger dependency if needed
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/services/datagen/config"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: PUT
    body_format: json
    body:  "{{ lookup('template', 'dependency.json' ) }}"
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
  vars:
    dependency_service: "ranger_service"
    dependency_name: "{{ ranger_name }}"
  when: ranger_name != '' and ranger_name != 'none'

- name: Set SR dependency if needed
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/services/datagen/config"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: PUT
    body_format: json
    body:  "{{ lookup('template', 'dependency.json' ) }}"
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
  vars:
    dependency_service: "schemaregistry_service"
    dependency_name: "{{ sr_name }}"
  when: sr_name != '' and sr_name != 'none'


- name: Wait to acknowledge new configs
  pause:
    seconds: 5

- name: Initialize hdfs dir for Datagen service
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/services/datagen/commands/CreateUserHdfsHomeDirCommand"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: POST
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no

- name: Check that no command is currently running on the service
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/services/datagen/commands"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
    body_format: json
  register: result
  until: result.content|length == 19
  retries: 60
  delay: 30

- name: Initialize Ranger Policies for Datagen service
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/services/datagen/commands/InitServiceCommand"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: POST
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no

- name: Check that no command is currently running on the service
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/services/datagen/commands"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
    body_format: json
  register: result
  until: result.content|length == 19
  retries: 60
  delay: 30

- name: Start Datagen Service
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/services/datagen/commands/start"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: POST
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no